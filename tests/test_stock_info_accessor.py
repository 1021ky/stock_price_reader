import unittest
from requests.exceptions import Timeout

from app.stock_info_accessor import (
    YahooFinanceAPIClient,
    YahooFinanceAPIConfigure as Configure,
)
from unittest.mock import patch
from unittest import mock

from time import CLOCK_THREAD_CPUTIME_ID


response_value_sample = """{"chart":{"result":[{"meta":{"currency":"JPY","symbol":"8060.T","exchangeName":"JPX","instrumentType":"EQUITY","firstTradeDate":978566400,"regularMarketTime":1626243301,"gmtoffset":32400,"timezone":"JST","exchangeTimezoneName":"Asia/Tokyo","regularMarketPrice":2600.0,"chartPreviousClose":2352.0,"priceHint":2,"currentTradingPeriod":{"pre":{"timezone":"JST","start":1626220800,"end":1626220800,"gmtoffset":32400},"regular":{"timezone":"JST","start":1626220800,"end":1626242400,"gmtoffset":32400},"post":{"timezone":"JST","start":1626242400,"end":1626242400,"gmtoffset":32400}},"dataGranularity":"1d","range":"6mo","validRanges":["1d","5d","1mo","3mo","6mo","1y","2y","5y","10y","ytd","max"]},"timestamp":[1610582400,1610668800,1610928000,1611014400,1611100800,1611187200,1611273600,1611532800,1611619200,1611705600,1611792000,1611878400,1612137600,1612224000,1612310400,1612396800,1612483200,1612742400,1612828800,1612915200,1613088000,1613347200,1613433600,1613520000,1613606400,1613692800,1613952000,1614124800,1614211200,1614297600,1614556800,1614643200,1614729600,1614816000,1614902400,1615161600,1615248000,1615334400,1615420800,1615507200,1615766400,1615852800,1615939200,1616025600,1616112000,1616371200,1616457600,1616544000,1616630400,1616716800,1616976000,1617062400,1617148800,1617235200,1617321600,1617580800,1617667200,1617753600,1617840000,1617926400,1618185600,1618272000,1618358400,1618444800,1618531200,1618790400,1618876800,1618963200,1619049600,1619136000,1619395200,1619481600,1619568000,1619740800,1620259200,1620345600,1620604800,1620691200,1620777600,1620864000,1620950400,1621209600,1621296000,1621382400,1621468800,1621555200,1621814400,1621900800,1621987200,1622073600,1622160000,1622419200,1622505600,1622592000,1622678400,1622764800,1623024000,1623110400,1623196800,1623283200,1623369600,1623628800,1623715200,1623801600,1623888000,1623974400,1624233600,1624320000,1624406400,1624492800,1624579200,1624838400,1624924800,1625011200,1625097600,1625184000,1625443200,1625529600,1625616000,1625702400,1625788800,1626048000,1626134400,1626243301],"indicators":{"quote":[{"high":[2354.0,2369.0,2306.0,2313.0,2315.0,2465.0,2395.0,2425.0,2445.0,2503.0,2426.0,2404.0,2413.0,2487.0,2454.0,2457.0,2462.0,2489.0,2517.0,2489.0,2531.0,2511.0,2518.0,2503.0,2483.0,2451.0,2428.0,2433.0,2412.0,2379.0,2414.0,2390.0,2389.0,2349.0,2400.0,2420.0,2450.0,2449.0,2478.0,2499.0,2550.0,2604.0,2604.0,2618.0,2659.0,2646.0,2651.0,2587.0,2566.0,2587.0,2566.0,2521.0,2481.0,2504.0,2533.0,2515.0,2551.0,2545.0,2544.0,2537.0,2538.0,2583.0,2551.0,2569.0,2584.0,2598.0,2564.0,2509.0,2531.0,2536.0,2729.0,2636.0,2621.0,2692.0,2646.0,2621.0,2620.0,2589.0,2558.0,2536.0,2575.0,2611.0,2620.0,2629.0,2652.0,2660.0,2684.0,2695.0,2675.0,2626.0,2637.0,2621.0,2580.0,2535.0,2606.0,2626.0,2661.0,2678.0,2678.0,2657.0,2650.0,2655.0,2714.0,2694.0,2704.0,2688.0,2591.0,2608.0,2557.0,2625.0,2663.0,2669.0,2586.0,2600.0,2606.0,2619.0,2608.0,2621.0,2579.0,2607.0,2540.0,2620.0,2619.0,2614.0],"close":[2352.0,2306.0,2300.0,2283.0,2291.0,2382.0,2375.0,2424.0,2430.0,2498.0,2365.0,2296.0,2400.0,2459.0,2434.0,2451.0,2448.0,2473.0,2509.0,2468.0,2500.0,2494.0,2505.0,2467.0,2443.0,2412.0,2387.0,2375.0,2399.0,2329.0,2395.0,2387.0,2384.0,2338.0,2400.0,2387.0,2441.0,2437.0,2471.0,2488.0,2550.0,2591.0,2594.0,2618.0,2659.0,2636.0,2616.0,2511.0,2552.0,2552.0,2527.0,2486.0,2456.0,2493.0,2521.0,2509.0,2504.0,2540.0,2486.0,2493.0,2525.0,2541.0,2549.0,2556.0,2551.0,2592.0,2534.0,2471.0,2513.0,2527.0,2601.0,2615.0,2573.0,2637.0,2596.0,2609.0,2602.0,2551.0,2526.0,2496.0,2553.0,2598.0,2618.0,2617.0,2648.0,2650.0,2670.0,2695.0,2646.0,2597.0,2622.0,2556.0,2536.0,2520.0,2593.0,2620.0,2647.0,2664.0,2663.0,2643.0,2616.0,2654.0,2700.0,2686.0,2688.0,2646.0,2551.0,2566.0,2542.0,2624.0,2656.0,2615.0,2552.0,2583.0,2569.0,2616.0,2595.0,2580.0,2569.0,2565.0,2526.0,2596.0,2607.0,2600.0],"low":[2276.0,2305.0,2274.0,2283.0,2286.0,2371.0,2349.0,2379.0,2413.0,2437.0,2356.0,2291.0,2322.0,2429.0,2410.0,2402.0,2436.0,2437.0,2464.0,2458.0,2483.0,2475.0,2491.0,2463.0,2443.0,2398.0,2386.0,2375.0,2370.0,2329.0,2374.0,2360.0,2366.0,2297.0,2324.0,2367.0,2394.0,2427.0,2426.0,2468.0,2492.0,2570.0,2569.0,2577.0,2614.0,2607.0,2616.0,2505.0,2524.0,2543.0,2482.0,2469.0,2448.0,2466.0,2503.0,2476.0,2485.0,2472.0,2477.0,2487.0,2516.0,2539.0,2506.0,2527.0,2537.0,2574.0,2529.0,2462.0,2497.0,2500.0,2573.0,2543.0,2565.0,2628.0,2584.0,2565.0,2588.0,2534.0,2505.0,2481.0,2522.0,2585.0,2588.0,2588.0,2604.0,2629.0,2646.0,2660.0,2640.0,2594.0,2608.0,2542.0,2508.0,2475.0,2547.0,2580.0,2630.0,2648.0,2652.0,2619.0,2609.0,2607.0,2634.0,2661.0,2667.0,2638.0,2537.0,2553.0,2523.0,2555.0,2610.0,2603.0,2541.0,2569.0,2562.0,2585.0,2585.0,2580.0,2536.0,2565.0,2481.0,2580.0,2594.0,2594.0],"open":[2283.0,2353.0,2283.0,2305.0,2303.0,2440.0,2360.0,2387.0,2424.0,2450.0,2374.0,2365.0,2346.0,2429.0,2445.0,2420.0,2462.0,2444.0,2470.0,2471.0,2494.0,2484.0,2500.0,2502.0,2470.0,2451.0,2402.0,2425.0,2403.0,2377.0,2379.0,2380.0,2387.0,2349.0,2326.0,2420.0,2409.0,2438.0,2450.0,2499.0,2493.0,2570.0,2580.0,2600.0,2630.0,2631.0,2640.0,2587.0,2550.0,2564.0,2562.0,2521.0,2476.0,2482.0,2520.0,2484.0,2518.0,2474.0,2535.0,2521.0,2533.0,2560.0,2520.0,2527.0,2583.0,2583.0,2557.0,2498.0,2514.0,2504.0,2698.0,2573.0,2610.0,2675.0,2643.0,2565.0,2599.0,2568.0,2551.0,2500.0,2534.0,2592.0,2614.0,2593.0,2604.0,2646.0,2650.0,2681.0,2673.0,2619.0,2633.0,2621.0,2570.0,2514.0,2549.0,2581.0,2653.0,2648.0,2672.0,2646.0,2650.0,2620.0,2654.0,2675.0,2696.0,2688.0,2580.0,2601.0,2530.0,2560.0,2620.0,2669.0,2586.0,2585.0,2583.0,2592.0,2598.0,2621.0,2552.0,2598.0,2529.0,2620.0,2616.0,2601.0],"volume":[124200,138200,77000,111400,109800,573900,258100,197300,209400,250400,410700,218800,242100,297400,210200,145000,146500,159300,159500,138300,204900,98900,118500,84100,121900,116300,102700,131900,98300,213800,105600,131200,100600,196600,186200,110500,184600,130400,158200,176500,177700,134000,111300,165300,159000,107300,95700,173400,137000,190100,454600,214500,238300,142300,101200,74700,157700,114900,115900,176100,143600,195600,115600,107200,120300,106500,89100,176400,94900,195000,690100,326200,300900,291100,251100,139800,153400,212600,182700,139300,107200,145400,72600,87300,73900,71100,78900,115600,111400,165200,104500,118900,156800,274900,195100,147000,108400,114800,93000,128600,147700,132400,309400,109600,144700,208800,215900,234300,251500,251200,184400,260400,141100,164000,122200,128300,81500,95500,80100,107600,137000,167200,145100,94700]}],"adjclose":[{"adjclose":[2352.0,2306.0,2300.0,2283.0,2291.0,2382.0,2375.0,2424.0,2430.0,2498.0,2365.0,2296.0,2400.0,2459.0,2434.0,2451.0,2448.0,2473.0,2509.0,2468.0,2500.0,2494.0,2505.0,2467.0,2443.0,2412.0,2387.0,2375.0,2399.0,2329.0,2395.0,2387.0,2384.0,2338.0,2400.0,2387.0,2441.0,2437.0,2471.0,2488.0,2550.0,2591.0,2594.0,2618.0,2659.0,2636.0,2616.0,2511.0,2552.0,2552.0,2527.0,2486.0,2456.0,2493.0,2521.0,2509.0,2504.0,2540.0,2486.0,2493.0,2525.0,2541.0,2549.0,2556.0,2551.0,2592.0,2534.0,2471.0,2513.0,2527.0,2601.0,2615.0,2573.0,2637.0,2596.0,2609.0,2602.0,2551.0,2526.0,2496.0,2553.0,2598.0,2618.0,2617.0,2648.0,2650.0,2670.0,2695.0,2646.0,2597.0,2622.0,2556.0,2536.0,2520.0,2593.0,2620.0,2647.0,2664.0,2663.0,2643.0,2616.0,2654.0,2700.0,2686.0,2688.0,2646.0,2551.0,2566.0,2542.0,2624.0,2656.0,2615.0,2552.0,2583.0,2569.0,2616.0,2595.0,2580.0,2569.0,2565.0,2526.0,2596.0,2607.0,2600.0]}]}}],"error":null}}"""


def mocked_requests_get(*args, **kwargs):
    class MockResponse:
        def __init__(self, json_data, status_code):
            self.json_data = json_data
            self.status_code = status_code

        def json(self):
            return self.json_data

    if "valid_code" in args[0]:
        return MockResponse(response_value_sample, 200)
    elif "timeout_code" in args[0]:
        raise Timeout()
    elif "unexpected_code" in args[0]:
        raise Exception()

    return MockResponse({}, 404)


class TestYahooFinanceAPIConfigure(unittest.TestCase):
    def test_init(self):
        # test set range
        param_and_excepted = [
            # param(range, interval) expected(_data_range, _interval)
            (("1day", "1day"), ("1d", "1d")),
            (("5days", "1day"), ("5d", "1d")),
            (("1month", "1day"), ("1mo", "1d")),
            (("3months", "1day"), ("3mo", "1d")),
            (("6months", "1day"), ("6mo", "1d")),
            (("1year", "1day"), ("1y", "1d")),
            (("2years", "1day"), ("2y", "1d")),
            (("5years", "1day"), ("5y", "1d")),
            (("10years", "1day"), ("10y", "1d")),
            (("ytd", "1day"), ("ytd", "1d")),
            (("max", "1day"), ("max", "1d")),
        ]
        for param, expected in param_and_excepted:
            r, i = param
            date_range, interval = expected
            configure = Configure(r, i)
            self.assertEqual(configure._date_range, date_range)
            self.assertEqual(configure._interval, interval)

        with self.assertRaises(KeyError):
            configure = Configure("1day", "dummy")
        with self.assertRaises(KeyError):
            configure = Configure("dummy", "1day")

    def test_generate_url(self):
        configure = Configure("6months", "1day")
        actual_url = configure.generate_url("1234.T")
        expected = "https://query1.finance.yahoo.com/v7/finance/chart/1234.T?range=6mo&interval=1d&indicators=quote&includeTimestamps=true"
        self.assertEqual(
            actual_url,
            expected,
        )


class TestGetStockinfo(unittest.TestCase):
    def test_get_stockinfo(self):

        client = YahooFinanceAPIClient()
        result = client.get_stockinfo("8060.T")
        from datetime import datetime

        result_time = datetime.fromtimestamp(result["timestamp"].values[-1])
        self.assertEqual(result_time.year, 2021)
        self.assertEqual(result_time.month, 7)
        self.assertEqual(result_time.day, 14)

    @mock.patch("requests.get", side_effect=mocked_requests_get)
    def test_get_stockinfo_with_mock(self, _):
        client = YahooFinanceAPIClient()
        result = client.get_stockinfo("valid_code")
        print("mock result is...")
        print(result)
        from datetime import datetime

        result_time = datetime.fromtimestamp(result["timestamp"].values[-1])
        self.assertEqual(result_time.year, 2021)
        self.assertEqual(result_time.month, 7)
        self.assertEqual(result_time.day, 14)
